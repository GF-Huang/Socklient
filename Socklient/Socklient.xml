<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Socklient</name>
    </assembly>
    <members>
        <member name="F:Socklient.Command.Bind">
            <summary>
            Unsupported yet
            </summary>
        </member>
        <member name="F:Socklient.SocksStatus.Initial">
            <summary>
            Before handshake and authentication.
            </summary>
        </member>
        <member name="F:Socklient.SocksStatus.Connected">
            <summary>
            After handshake, authentication, and send <see cref="F:Socklient.Command.Connect"/> command.
            </summary>
        </member>
        <member name="F:Socklient.SocksStatus.Disposed">
            <summary>
            Disposed, can not reuse.
            </summary>
        </member>
        <member name="T:Socklient.ProtocolErrorException">
            <summary>
            The exception that is thrown when the SOCKS5 server replies unexpected response.
            </summary>
        </member>
        <member name="T:Socklient.AuthenticationException">
            <summary>
            The exception that is thrown when authentication failed.
            </summary>
        </member>
        <member name="T:Socklient.SocksClient">
            <summary>
            A SOCKS5 client.
            </summary>
        </member>
        <member name="P:Socklient.SocksClient.BoundAddress">
            <summary>
            The BND.ADDR field of the response from server.
            </summary>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Socklient.SocksClient"/> is not connected or associated.</exception>
        </member>
        <member name="P:Socklient.SocksClient.BoundPort">
            <summary>
            The BND.PORT field of the response from server.
            </summary>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Socklient.SocksClient"/> is not connected or associated.</exception>
        </member>
        <member name="P:Socklient.SocksClient.TcpClient">
            <summary>
            Get underlying <see cref="T:System.Net.Sockets.TcpClient"/> for more fine-grained control in CONNECT mode.
            </summary>
        </member>
        <member name="P:Socklient.SocksClient.UdpClient">
            <summary>
            Get underlying <see cref="T:System.Net.Sockets.UdpClient"/> for more fine-grained control in UDP-ASSOCIATE mode.
            This property is null in CONNECT mode. 
            </summary>
        </member>
        <member name="P:Socklient.SocksClient.ShouldIgnoreBoundAddressCallback">
            <summary>
            
            </summary>
        </member>
        <member name="M:Socklient.SocksClient.#ctor(System.Net.IPAddress,System.Int32,System.Net.NetworkCredential)">
            <summary>
            Initializes a new instance of <see cref="T:Socklient.SocksClient"/> with the specified SOCKS5 <paramref name="server"/> and 
            <paramref name="port"/>, <paramref name="credential"/> is optional.
            </summary>
            <param name="server">The address of the SOCKS5 server.</param>
            <param name="port">The port of the SOCKS5 server.</param>
            <param name="credential">Optional credential for username/password authentication.</param>
        </member>
        <member name="M:Socklient.SocksClient.#ctor(System.String,System.Int32,System.Net.NetworkCredential)">
            <summary>
            Initializes a new instance of <see cref="T:Socklient.SocksClient"/> with the specified SOCKS5 <paramref name="server"/> and 
            <paramref name="port"/>, <paramref name="credential"/> is optional.
            </summary>
            <param name="server">The hostname of the SOCKS5 server.</param>
            <param name="port">The port of the SOCKS5 server.</param>
            <param name="credential">Optional credential for username/password authentication.</param>
        </member>
        <member name="M:Socklient.SocksClient.Dispose">
            <summary>
            Dispose the underlying <see cref="P:Socklient.SocksClient.TcpClient"/> and <see cref="P:Socklient.SocksClient.UdpClient"/>.
            </summary>
        </member>
        <member name="M:Socklient.SocksClient.ConnectAsync(System.Net.IPAddress,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Do handshake and authentication (if need), then send a <see cref="F:Socklient.Command.Connect"/> command to the SOCKS5 server.
            </summary>
            <param name="address">The destination address to communicating via SOCKS5 server.</param>
            <param name="port">The destination port to communicating via SOCKS5 server.</param>
            <param name="token">The token to monitor for cancellation. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
        </member>
        <member name="M:Socklient.SocksClient.ConnectAsync(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Do handshake and authentication (if need), then send a <see cref="F:Socklient.Command.Connect"/> command to the SOCKS5 server.
            </summary>
            <param name="domain">The destination domain to communicating via SOCKS5 server.</param>
            <param name="port">The destination port to communicating via SOCKS5 server.</param>
            <param name="token">The token to monitor for cancellation. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
        </member>
        <member name="M:Socklient.SocksClient.GetStream">
            <summary>
            Get the <see cref="T:System.Net.Sockets.NetworkStream"/> of the underlying <see cref="P:Socklient.SocksClient.TcpClient"/>.
            </summary>
        </member>
        <member name="M:Socklient.SocksClient.UdpAssociateAsync(System.Net.IPAddress,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Do handshake and authentication (if need), then send a <see cref="F:Socklient.Command.UdpAssociate"/> command to the SOCKS5 server.
            <para>
            The <paramref name="address"/> and <paramref name="port"/> fields contain the address and port that the client expects to use to send UDP datagrams on for the association. The server MAY use this information to limit access to the association. If the client is not in possesion of the information at the time of UDP Associate (for example, most home users are behind NAT, there is no way to determine the public IP and port they will use before sending), the client MUST use a port number and address of all zeros.
            </para>
            </summary>
            <param name="address">The address that the client expects to use to send UDP datagrams on for the association. Alias of DST.ADDR defined in RFC 1928 UDP Associate.</param>
            <param name="port">The port that the client expects to use to send UDP datagrams on for the association. Alias of DST.PORT defined in RFC 1928 UDP Associate.</param>
            <param name="token">The token to monitor for cancellation. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
        </member>
        <member name="M:Socklient.SocksClient.SendAsync(System.ReadOnlyMemory{System.Byte},System.String,System.Int32)">
            <summary>
            Send datagram to destination domain and port via SOCKS server.
            </summary>
            <param name="datagram">The datagram to send.</param>
            <param name="domain">The destination domain.</param>
            <param name="port">The destination port.</param>
        </member>
        <member name="M:Socklient.SocksClient.SendAsync(System.ReadOnlyMemory{System.Byte},System.Net.IPAddress,System.Int32)">
            <summary>
            Send datagram to destination address and port via SOCKS server.
            </summary>
            <param name="datagram">The datagram to send.</param>
            <param name="address">The destination address.</param>
            <param name="port">The destination port.</param>
        </member>
        <member name="M:Socklient.SocksClient.ReceiveAsync">
            <summary>
            Receive datagram via SOCKS server.
            </summary>
        </member>
        <member name="T:Socklient.ShouldIgnoreBoundAddressCallback">
            <summary>
            Used to decide whether to ignore the BND.ADDR responded by UDP Associate command.
            <para>
            In the Internet world, a considerable number of SOCKS5 servers have incorrect UDP Associate implementation. 
            </para>
            <para>
            According to the description of UDP Association in RFC 1928: "In the reply to a UDP ASSOCIATE request, the BND.PORT and BND.ADDR fields indicate the port number/address where the client MUST send UDP request messages to be relayed.", the server should respond its public IP address. If the server has multiple public IP addresses, the server should decide which public IP to respond according to its own strategy. 
            </para>
            <para>
            However, most SOCKS5 servers implementations are very rough. They often use some private addresses as BND.ADDR respond to the client, such as 10.0.0.1, 172.16.1.1, 192.168.1.1 and so on. In this case, the UDP packet sent by the client cannot reach the server at all, unless the client and the server are in the same LAN.
            </para>
            <para>
            Therefore, through this callback, the client can according to the received BND.ADDR to determine whether this address is a private address. If true is returnedtrue, the client will send UDP packet to ServerAddress:BND.PORT; If false is returned, it will send UDP packet to BND.ADDR:BND.PORT.
            </para>
            </summary>
            <param name="sender">The <see cref="T:Socklient.SocksClient"/> instance which calls the callback.</param>
            <param name="address">The BND.ADDR of responded by UDP Associate command.</param>
            <returns></returns>
        </member>
        <member name="T:Socklient.UdpReceiveMemory">
            <summary>
            Presents SOCKS5 server UDP replied result information from a call to the <see cref="M:Socklient.SocksClient.ReceiveAsync"/> method.
            </summary>
        </member>
        <member name="P:Socklient.UdpReceiveMemory.Memory">
            <summary>
            Gets the <see cref="T:System.ReadOnlyMemory`1"/> with the data received in the UDP packet.
            </summary>
        </member>
        <member name="P:Socklient.UdpReceiveMemory.RemoteEndPoint">
            <summary>
            Gets the remote endpoint from which the UDP packet was received.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.AllowNullAttribute">
            <summary>
                Specifies that <see langword="null"/> is allowed as an input even if the
                corresponding type disallows it.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.AllowNullAttribute.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.AllowNullAttribute"/> class.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute">
            <summary>
                Specifies that <see langword="null"/> is disallowed as an input even if the
                corresponding type allows it.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DisallowNullAttribute.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute"/> class.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute">
            <summary>
                Specifies that a method that will never return under any circumstance.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute.#ctor">
             <summary>
                 Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute"/> class.
             </summary>
            
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>
                Specifies that the method will not return if the associated <see cref="T:System.Boolean"/>
                parameter is passed the specified value.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
            <summary>
                Gets the condition parameter value.
                Code after the method is considered unreachable by diagnostics if the argument
                to the associated parameter matches this value.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute"/>
                class with the specified parameter value.
            </summary>
            <param name="parameterValue">
                The condition parameter value.
                Code after the method is considered unreachable by diagnostics if the argument
                to the associated parameter matches this value.
            </param>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
            <summary>
                Specifies that an output may be <see langword="null"/> even if the
                corresponding type disallows it.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullAttribute.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute"/> class.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>
                Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue"/>, 
                the parameter may be <see langword="null"/> even if the corresponding type disallows it.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
            <summary>
                Gets the return value condition.
                If the method returns this value, the associated parameter may be <see langword="null"/>.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
            <summary>
                 Initializes the attribute with the specified return value condition.
            </summary>
            <param name="returnValue">
                The return value condition.
                If the method returns this value, the associated parameter may be <see langword="null"/>.
            </param>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute">
            <summary>
                Specifies that the method or property will ensure that the listed field and property members have
                not-<see langword="null"/> values.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.Members">
            <summary>
                Gets field or property member names.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String)">
            <summary>
                Initializes the attribute with a field or property member.
            </summary>
            <param name="member">
                The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String[])">
            <summary>
                Initializes the attribute with the list of field and property members.
            </summary>
            <param name="members">
                The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute">
            <summary>
                Specifies that the method or property will ensure that the listed field and property members have
                non-<see langword="null"/> values when returning with the specified return value condition.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.ReturnValue">
            <summary>
                Gets the return value condition.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.Members">
            <summary>
                Gets field or property member names.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String)">
            <summary>
                Initializes the attribute with the specified return value condition and a field or property member.
            </summary>
            <param name="returnValue">
                The return value condition. If the method returns this value,
                the associated parameter will not be <see langword="null"/>.
            </param>
            <param name="member">
                The field or property member that is promised to be not-<see langword="null"/>.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String[])">
            <summary>
                Initializes the attribute with the specified return value condition and list
                of field and property members.
            </summary>
            <param name="returnValue">
                The return value condition. If the method returns this value,
                the associated parameter will not be <see langword="null"/>.
            </param>
            <param name="members">
                The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>
                Specifies that an output is not <see langword="null"/> even if the
                corresponding type allows it.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullAttribute.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.NotNullAttribute"/> class.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute">
            <summary>
                Specifies that the output will be non-<see langword="null"/> if the
                named parameter is non-<see langword="null"/>.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.ParameterName">
            <summary>
                Gets the associated parameter name.
                The output will be non-<see langword="null"/> if the argument to the
                parameter specified is non-<see langword="null"/>.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)">
            <summary>
                Initializes the attribute with the associated parameter name.
            </summary>
            <param name="parameterName">
                The associated parameter name.
                The output will be non-<see langword="null"/> if the argument to the
                parameter specified is non-<see langword="null"/>.
            </param>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>
                Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue"/>,
                the parameter will not be <see langword="null"/> even if the corresponding type allows it.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>
                Gets the return value condition.
                If the method returns this value, the associated parameter will not be <see langword="null"/>.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>
                Initializes the attribute with the specified return value condition.
            </summary>
            <param name="returnValue">
                The return value condition.
                If the method returns this value, the associated parameter will not be <see langword="null"/>.
            </param>
        </member>
    </members>
</doc>
